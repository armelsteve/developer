pipeline{
    options {
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
    }
    agent any

    stages{
        stage('pull from scm'){
            steps{
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], 
                doGenerateSubmoduleConfigurations: false, 
                extensions: [], 
                submoduleCfg: [], 
                userRemoteConfigs: [[url: 'https://github.com/armelsteve/developer.git']]])
            }
        }
        stage('remove existing containers'){
            steps{
                sshagent(['ec2']){
                    sh"""
                        echo 'removing existing images'
                        ssh -o StrictHostKeyChecking=no ec2-user@52.205.227.25 docker rmi -f $(docker images -q)
                        echo 'removing running containers'
                        ssh -o StrictHostKeyChecking=no ec2-user@52.205.227.25 docker rm -f $(docker ps -a -q)
                    """
                }
            }
        }

        stage('copy files to ec2 instance'){
            steps{
                dir("${WORKSPACE}/jobs/OPS_create_docker_img"){
                    sshagent(['ec2']) {
                             sh """ scp -o StrictHostKeyChecking=no  Dockerfile ec2-user@52.205.227.25:/home/ec2-user 
                                    ssh -o StrictHostKeyChecking=no ec2-user@52.205.227.25 ls -la | grep Dockerfile
                             """

                        }
            }

            }
        }
        stage('build image'){
            steps{
                dir("${WORKSPACE}/jobs/OPS_create_docker_img"){
                    sshagent(['ec2']) {
                        sh """
                            ssh -o StrictHostKeyChecking=no ec2-user@52.205.227.25 docker build -t app:1.0 .
                            ssh -o StrictHostKeyChecking=no ec2-user@52.205.227.25 docker images
                            ssh -o StrictHostKeyChecking=no ec2-user@52.205.227.25 docker run -p 8000:80 -d app:1.0                   
                        """
                    }
            }

            }
        }


    }
    post{
        success{
            deleteDir()
        }
        failure{
            deleteDir()
        }
        aborted{
            deleteDir()
        }
        unstable{
            deleteDir()
        }
    }
}